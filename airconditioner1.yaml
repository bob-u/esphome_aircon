# ESPHome based Air Conditioner firmware
#
# Runs on the ESPHome platform for ESP8266-based devices
# ESPHome developed by Otto Winter (@OttoWinter_)
# https://esphome.io
#
# Developed by James Petersen (@Edu_Coder) *** This file only ***
#
# Released under a Creative Commons Attribution-ShareAlike 2.5 Canada (CC BY-SA 2.5 CA)
# https://creativecommons.org/licenses/by-sa/2.5/ca/
# Under the following terms:
# Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.
# ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.

substitutions:
  # Device ID to show in Home Assistant. Access from the integrations tab, by adding ${DEVICE_ID}.local
  DEVICE_ID: ac_01
  # The human-friendly device name
  DEVICE_NAME: AC 01
  # Default target temperature in degrees C
  TARGET_TEMP: '25'
  # On-board LED pin, to indicate status. D4 on a Wemos D1 mini
  STATUS_PIN: D4
  # GPIO that controls the compressor relay
  COMPRESSOR_OUTPUT: D6
  # GPIO that controls the fan on/off
  FAN_OUTPUT: D7
  # i2c databus GPIO
  SDA: D2
  SCL: D1

esphome:
  name: ${DEVICE_ID}
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret ssid
  password: !secret wifi_password

  ap:
    ssid: ${DEVICE_ID}

captive_portal:

# Enable logging.
logger:
  level: debug

# Enable Home Assistant API.
api:

# Enable over-the-air updates.
ota:

# Enable Web server.
web_server:
  port: 80

# Enable the i2c bus
i2c:
  sda: ${SDA}
  scl: ${SCL}
  scan: False

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information.
text_sensor:
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${DEVICE_NAME} IP
    ssid:
      name: ${DEVICE_NAME} SSID

# Sensors with general information.
sensor:
  - platform: uptime
    name: ${DEVICE_NAME} Uptime

  - platform: htu21d
    temperature:
      id: temp
      name: ${DEVICE_NAME} Temperature
      filters:
        - median:
            window_size: 7
            send_every: 4
            send_first_at: 1
    humidity:
      id: hum
      name: ${DEVICE_NAME} Humidity
      filters:
        - median:
            window_size: 7
            send_every: 4
            send_first_at: 1
    update_interval: 10s

binary_sensor:
  - platform: status
    name: ${DEVICE_NAME} Status

status_led:
    pin:
      number: ${STATUS_PIN}
      inverted: true

switch:
  - platform: gpio
    pin:
      number: ${COMPRESSOR_OUTPUT}
      inverted: true
    id: compressor
  - platform: gpio
    pin:
      number: ${FAN_OUTPUT}
      inverted: true
    id: fan
  - platform: restart
    name: ${DEVICE_NAME} restart

climate:
  - platform: thermostat
    name: ${DEVICE_NAME} Thermostat
    sensor: temp
    default_target_temperature_high: ${TARGET_TEMP}
    id: therm

    cool_action:
      - script.execute: on_cool
    idle_action:
      - script.execute: on_idle
    # fan_only_action:
    #   - script.execute: fan_only_action
    fan_mode_on_action:
      - script.execute: fan_on_action
    fan_mode_auto_action:
      - script.execute: fan_auto_action

script:
  - id: on_cool
    then:
      - logger.log: "on_cool start"
      - if:
          condition:
            - script.is_running: on_idle
          then:
            - script.wait: on_idle
      - if:
          condition:
            - switch.is_off: fan
          then:
            - logger.log: "Spooling up fan"
            - switch.turn_on: fan
            - delay: 15s
      - logger.log: "Turning on compressor"
      - switch.turn_on: compressor
      - delay: 2s
      - logger.log: "on_cool end"

  - id: on_idle
    then:
      - logger.log: "on_idle start"
      - if:
          condition:
            - script.is_running: on_cool
          then:
            - logger.log: "waiting for on_cool"
            - script.wait: on_cool

      - if:
          condition:
            - switch.is_on: compressor
          then:
            - logger.log: "Turning off compressor"
            - switch.turn_off: compressor
            - delay: 60s
            - if:
                condition:
                  and:
                    - lambda: return id(therm).fan_mode == esphome::climate::ClimateFanMode::CLIMATE_FAN_AUTO;
                    - lambda: return id(therm).action == esphome::climate::ClimateAction::CLIMATE_ACTION_COOLING;
                then:
                  - logger.log: "Turning off fan"
                  - switch.turn_off: fan

      - if:
          condition:
            or:
              - lambda: return id(therm).fan_mode == esphome::climate::ClimateFanMode::CLIMATE_FAN_AUTO;
              - lambda: return id(therm).mode != esphome::climate::ClimateMode::CLIMATE_MODE_OFF;
          then:
            - logger.log: "Turning off fan"
            - switch.turn_off: fan

      - logger.log: "on_idle end"

  - id: fan_on_action
    then:
      - logger.log: "fan_on_action start"
      - if:
          condition:
            and:
              - switch.is_off: fan
              - lambda: return id(therm).mode == esphome::climate::ClimateMode::CLIMATE_MODE_COOL;
          then:
            - switch.turn_on: fan
      - logger.log: "fan_on_action end"

  - id: fan_only_action
    then:
      - logger.log: "fan_only_action start"
      - switch.turn_on: fan
      - logger.log: "fan_only_action end"

  - id: fan_auto_action
    then:
      - logger.log: "fan_auto_action start"
      - if:
          condition:
            - lambda: return id(therm).action != esphome::climate::ClimateAction::CLIMATE_ACTION_COOLING;
          then:
            - script.execute: on_idle
      - logger.log: "fan_auto_action end"

font:
  - file: 'slkscr.ttf'
    id: font1
    size: 8

  - file: 'bebas.ttf'
    id: font2
    size: 36

  - file: 'arial_narrow_7.ttf'
    id: font3
    size: 12

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    id: oled
    lambda: |-
      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "${DEVICE_NAME}");

      it.printf(64, 0, id(font2), TextAlign::TOP_CENTER, "%.1f", id(temp).state);

      // Print target temperature
      it.printf(3, 52, id(font3), TextAlign::TOP_LEFT , "%.1f°", id(therm).target_temperature);

      // Print humidity
      if (id(hum).has_state()) {
        it.printf(42, 52, id(font3), TextAlign::TOP_CENTER , "%.0f%%", id(hum).state);
      }

      // Print time in HH:MM format
      it.strftime(120, 52, id(font3), TextAlign::TOP_RIGHT, "%H:%M", id(homeassistant_time).now());
