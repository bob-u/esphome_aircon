# ESPHome based Air Conditioner firmware
#
# Runs on the ESPHome platform for ESP8266-based devices
# ESPHome developed by Otto Winter (@OttoWinter_)
# https://esphome.io
#
# Developed by James Petersen (@Edu_Coder) *** This file only ***
#
# Released under a Creative Commons Attribution-ShareAlike 2.5 Canada (CC BY-SA 2.5 CA)
# https://creativecommons.org/licenses/by-sa/2.5/ca/
# Under the following terms:
# Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.
# ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.

# Modify these values to customize your instance
substitutions:
  DEVICE_ID: airconditioner1                        # Device ID to show in Home Assistant. Access from the integrations tab, by adding ${DEVICE_ID}.local
  STATUS_PIN: D4                                    # On-board LED pin, to indicate status. D4 on a Wemos D1 mini
  COMPRESSOR_OUTPUT: D6                             # GPIO that controls the compressor relay
  COMPRESSOR_TIMEOUT: 15s #2min                     # Minimum run time for the compressor. Ensures that it will not power cycle too rapidly. 2min is recommended
  FAN_TIMEOUT: 15s # 2min                           # Minimum run time for the fan after the compressor has been shut off. Ensures that compressor is cooled before left idle. 2min is recommended
  FAN_ENABLE: D5                                    # GPIO that controls the fan on/off
  FAN_SPEED: D7                                     # GPIO that controls fan speed (e.g. ON = high, OFF = low)
  IR_RECEIVER: D8
  WS_PIN: D3                                        # GPIO to control WS2812B LEDs. Ensure that logic level output from your board meets the spec for these chips' input.
  SDA: D1                                           # i2c data GPIO
  SCL: D2                                           # i2c clock GPIO
  RESET: D0                                         # GPIO for resetting the oled display. Not required
  TEMP_INPUT: input_number.airconditioner1_temp     # Input number entity ID for controlling target temperature
  MODE_INPUT: input_select.ac1_mode                 # Input select entity ID for controlling operation mode
  HYSTERESIS: "2"                                   # Defines the number of degrees celsius on either side of the target temperature that is deemed "acceptable". Recommended to be greater than zero

# ESP Home configuration
esphome:
  name: airconditioner1
  platform: ESP8266
  board: d1_mini
  on_boot:
    then:
      - switch.turn_off: compressor_output
      - switch.turn_off: fan_output

# Network credentials. Use a secret.yaml file to split off your critical information
wifi:
  ssid: !secret ssid
  password: !secret wifi_password

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

# mqtt:
#   broker: !secret mqtt-ip
#   username: !secret mqtt-user
#   password: !secret mqtt-pass
#   discovery: true
#   id: mqtt_client

i2c:
  sda: ${SDA}
  scl: ${SCL}
  scan: False

status_led:
  pin:
    number: ${STATUS_PIN}
    inverted: true

globals:
  # Current operating mode,
  # 0 (off), 1 (auto), 2 (cool), 3 (fan_only)
  - id: opMode
    type: byte
    restore_value: no
    initial_value: '0'

  # Current operating state. Different from above (e.g. can be cooling or idle when set to auto)
  # 0 (off), 1 (idle), 2 (cooling), 3 (fan)
  - id: opState
    type: byte
    restore_value: no
    initial_value: '0'

  - id: targetTemp # target temperature
    type: byte
    restore_value: no
    initial_value: '21'

switch:
  - platform: gpio
    id: compressor_output
    internal: true
    pin:
      number: ${COMPRESSOR_OUTPUT}
      inverted: yes

  - platform: gpio
    id: fan_output
    internal: true
    pin:
      number: ${FAN_ENABLE}
      inverted: yes

time:
  - platform: homeassistant
    id: time

binary_sensor:
  - platform: status
    name: "${DEVICE_ID} Status"

<<: !include scripts.yaml

<<: !include light.yaml

sensor:
  # HTU21D used to determine ambient temperature. Can be replaced by any other temperature sensor (provided the logic remains the same)
  # Should be placed in front of the air intake for the AC unit.
  - platform: htu21d
    temperature:
      name: "${DEVICE_ID} Temp"
      id: temp
      on_value:
        - script.execute: on_temp_value

    humidity:
      name: "${DEVICE_ID} Humidity"
      id: hum
    update_interval: 60s

  # BH1750 Lux Sensor - not required for operation
  - platform: bh1750
    name: "${DEVICE_ID} Lux"
    id: lux
    address: 0x23
    update_interval: 60s

  # Home assistant input select element that is used to set the operation mode from the web.
  # Can also be modified by use of the rotary encoder, and will update to reflect the currenly set operation mode
  - platform: homeassistant
    id: setTemp
    entity_id: ${TEMP_INPUT}
    on_value:
      - then:
          - script.execute: on_temp_value

text_sensor:

  - id: setMode
    name: "${DEVICE_ID} Mode"
    platform: homeassistant
    entity_id: ${MODE_INPUT}
    internal: true
    on_value:
      - then:
          - script.execute: on_mode_value

  - id: opStateText
    platform: template
    name: "${DEVICE_ID} Operation State"
    update_interval: 15s
    lambda: |-
      if (id(opState) == 0) {
        return {"Off"};
      } else if (id(opState) == 1) {
        return {"Idle"};
      } else if (id(opState) == 2) {
        return {"Cool"};
      } else if (id(opState) == 3) {
        return {"Fan"};
      } else {
        return {"Unknown"};
      }

remote_receiver:
  pin: ${IR_RECEIVER}
  dump: all

font:
- file: 'slkscr.ttf'
  id: font1
  size: 8

- file: 'bebas.ttf'
  id: font2
  size: 36
  glyphs: "0123456789: "

- file: 'arial_narrow_7.ttf'
  id: font3
  size: 12
  glyphs: "0123456789°%."

image:
  - file: "fan_outline-large.png"
    id: fanIcon
  - file: "snowflake-large.png"
    id: coolIcon
  - file: "clock-outline.png"
    id: idleIcon

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    reset_pin: ${RESET}
    address: 0x3C
    id: oled
    lambda: |-

      it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Air Conditioner");

      // Print time in HH:MM format
      it.strftime(42, 0, id(font2), TextAlign::TOP_CENTER, "%H:%M", id(time).now());

      // Print temperature
      if (id(temp).has_state()) {
        it.printf(3, 52, id(font3), TextAlign::TOP_LEFT , "%.1f°", id(temp).state);
      }

      // Print humidity
      if (id(hum).has_state()) {
        it.printf(42, 52, id(font3), TextAlign::TOP_CENTER , "%.0f%%", id(hum).state);
      }

      // Print lux
      if (id(lux).has_state()) {
        it.printf(80, 52, id(font3), TextAlign::TOP_RIGHT , "%.0f", id(lux).state);
      }

      // Print mode
      if (id(setMode).has_state()) {
        it.printf(102, 54, id(font1), TextAlign::TOP_CENTER , "%s", id(opStateText).state.c_str());
      }

      // Display state icon
      if (id(opState) == 1) {
        it.image(86, 12, id(idleIcon));
      } else if (id(opState) == 2) {
        it.image(86, 12, id(coolIcon));
      } else if (id(opState) == 3) {
        it.image(86, 12, id(fanIcon));
      }
